var TC = require('../TypeChecker');
Errors = require('../Error');


var Identity = function(val){
    if(!(this instanceof Identity)){
	return new Identity(val);
    }
    this.value = val;
    this.type = 'Identity';
};

// SemiGroup (Semigroup a => Identity a)

Identity.prototype.empty = function() {
    Errors.varError(!TC.isMonoid(this.value), 'value', 'Monoid', 'Identity.empty');
    return new Identity( this.value.empty ? this.value.empty() : this.value.constructor.empty() );
};

// Monoid (Monoid a => Identity a -> Identity a -> Identity a)

Identity.prototype.concat = function(id){
    Errors.varError(!TC.isMonoid(this.value), 'value', 'Monoid', 'Identity.concat');
    Errors.varError(!TC.isMonoid(id.value), 'id.value', 'Monoid', 'Identity.concat'); // Meh... It works
    return new Identity(this.value.concat(id.value));
};

// Functor
Identity.prototype.map = function(f) {
    Errors.argError(!TC.isFunction(f), f, 'function', 'first', 'Identity.map');
    return new Identity(f(this.value));
};

// Applicative


		 
